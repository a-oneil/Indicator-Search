import httpx
from ..utils import (
    failed_to_run,
    no_results_found,
)


async def malware_bazzar(indicator, client: httpx.AsyncClient):
    try:
        response = await client.post(
            "https://mb-api.abuse.ch/api/v1/",
            data={"query": "get_info", "hash": indicator.indicator},
        )

        if response.status_code != 200:
            return failed_to_run(
                tool_name="malware_bazzar",
                status_code=response.status_code,
                reason=str(response.reason_phrase),
            )

        if not response.json().get("query_status") == "ok":
            return no_results_found("malware_bazzar")

        # fmt: off
        return {
            "tool": "malware_bazzar",
            "outcome": {
                "status": "results_found",
                "error_message": None,
                "status_code": response.status_code,
                "reason": str(response.reason_phrase),
            },
            "results": {
                "first_seen": response.json().get("data")[0].get("first_seen"),
                "file_name": response.json().get("data")[0].get("file_name"),
                "file_type": response.json().get("data")[0].get("file_type"),
                "file_type_mime": response.json().get("data")[0].get("file_type_mime"),
                "signature": response.json().get("data")[0].get("signature"),
                "delivery_method": response.json().get("data")[0].get("delivery_method"),
                "tags": response.json().get("data")[0].get("tags"),
            },
        }
        # fmt: on

    except Exception as error_message:
        return failed_to_run(tool_name="malware_bazzar", error_message=error_message)
